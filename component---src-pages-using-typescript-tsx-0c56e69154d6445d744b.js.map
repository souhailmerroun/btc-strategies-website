{"version":3,"file":"component---src-pages-using-typescript-tsx-0c56e69154d6445d744b.js","mappings":"2NAaA,MAgCaA,EAA0B,IAAMC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAM,qBAExD,UAlCwDC,IAAAA,IAAC,KACvDC,EAAI,SACJC,GACD,SACCL,EAAAA,cAACM,EAAAA,EAAM,KACLN,EAAAA,cAAAA,KAAAA,KAAI,mBACc,yBAAG,0BAErBA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,YAAe,0CAClC,4BAAM,YAAe,qCACzC,4BAAM,oBAAuB,MAEvCA,EAAAA,cAAAA,IAAAA,KAAG,4CACwC,4BAAM,cAAiB,oBACxD,4BAAM,cAAiB,gBAAa,4BAAM,YAAe,UAEnEA,EAAAA,cAAAA,IAAAA,KAAG,gCAC4B,4BAAOK,EAASE,UAAgB,uBACnDH,EAAKI,KAAKC,UAAU,KAEhCT,EAAAA,cAAAA,IAAAA,KAAG,kCAC+B,IAChCA,EAAAA,cAAAA,IAAAA,CAAGU,KAAK,yEAAwE,kCAE5E,KAGNV,EAAAA,cAACW,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C,yFCVX,MA5Be,QAAC,UAAEC,GAAW,SAC3B,uBAAKC,UAAU,sDACb,uBAAKA,UAAU,mBACb,gBAAC,EAAAH,KAAI,CAACG,UAAU,eAAeF,GAAG,KAAKC,GACvC,0BACEC,UAAU,iBACVC,KAAK,SACL,iBAAe,WACf,iBAAe,aACf,gBAAc,YACd,gBAAc,QACd,aAAW,qBAEX,wBAAMD,UAAU,yBAElB,uBAAKA,UAAU,2BAA2BE,GAAG,aAC3C,sBAAIF,UAAU,cAAa,IACxBG,EAAWC,KAAIC,GACd,sBAAIC,IAAKD,EAAUL,UAAU,YAC3B,gBAAC,EAAAH,KAAI,CAACG,UAAU,WAAWF,GAAE,uBAAyBO,GAAaA,EAASE,qBAMlF,ECUR,MA1Be,IAAmB,IAAD,MAAjB,SAAEC,GAAU,EAC1B,MAAMlB,GAAOmB,EAAAA,EAAAA,gBAAe,cAU5B,OACE,gCACE,gBAAC,EAAM,CAACV,WAAiC,QAAtB,EAAAT,EAAKI,KAAKgB,oBAAY,aAAtB,EAAwBtB,QAAK,UAChD,uBAAKY,UAAU,aACb,wBAAMA,UAAU,QAAQQ,GACxB,0BAAQR,UAAU,oBAAmB,MAChC,IAAIW,MAAOC,cAAc,gBAC5B,IACA,qBAAGhB,KAAK,4BAA2B,YAGtC,C,+CCSP,IAlCA,SAAa,GAAmC,IAAD,QAAlC,YAAEiB,EAAW,MAAEzB,EAAK,SAAEoB,GAAU,EAC3C,MAAM,KAAEd,IAASe,EAAAA,EAAAA,gBAAe,YAc1BK,EAAkBD,GAAenB,EAAKgB,aAAaG,YACnDE,EAAgC,QAApB,EAAGrB,EAAKgB,oBAAY,aAAjB,EAAmBtB,MAExC,OACE,gCACE,6BAAQ2B,EAAkB3B,EAAK,MAAM2B,EAAiB3B,GACtD,wBAAM4B,KAAK,cAAcC,QAASH,IAClC,wBAAMI,SAAS,WAAWD,QAAS7B,IACnC,wBAAM8B,SAAS,iBAAiBD,QAASH,IACzC,wBAAMI,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBAAMD,KAAK,kBAAkBC,SAA0B,QAAjB,EAAAvB,EAAKgB,oBAAY,aAAjB,EAAmBS,SAAM,KAC/D,wBAAMH,KAAK,gBAAgBC,QAAS7B,IACpC,wBAAM4B,KAAK,sBAAsBC,QAASH,IACzCN,EAGP,C","sources":["webpack://gatsby-starter-default/./src/pages/using-typescript.tsx","webpack://gatsby-starter-default/./src/components/header.js","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  location,\n}) => (\n  <Layout>\n    <h1>\n      Gatsby supports <b>TypeScript by default</b>\n    </h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <code>typescript</code> via npm\n      and run <code>tsc --init</code> to create a <code>tsconfig</code> file.\n    </p>\n    <p>\n      You're currently on the page <code>{location.pathname}</code> which was\n      built on {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n","import * as React from \"react\";\nimport { Link } from \"gatsby\";\nimport currencies from \"../data/currencies.json\";\n\nconst Header = ({ siteTitle }) => (\n  <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-3\">\n    <div className=\"container-fluid\">\n      <Link className=\"navbar-brand\" to=\"/\">{siteTitle}</Link>\n      <button \n        className=\"navbar-toggler\" \n        type=\"button\" \n        data-bs-toggle=\"collapse\" \n        data-bs-target=\"#navbarNav\" \n        aria-controls=\"navbarNav\" \n        aria-expanded=\"false\" \n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\"> {/* ms-auto to push nav to the right */}\n          {currencies.map(currency => (\n            <li key={currency} className=\"nav-item\">\n              <Link className=\"nav-link\" to={`/technical-analysis/${currency}`}>{currency.toUpperCase()}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  </nav>\n);\n\nexport default Header;\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata?.title || `Title`} />\n      <div className=\"container\">\n        <main className=\"mb-3\">{children}</main>\n        <footer className=\"text-center mb-3\">\n          Â© {new Date().getFullYear()} &middot; Built with\n          {` `}\n          <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n        </footer>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction Seo({ description, title, children }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ``} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n"],"names":["Head","React","Seo","title","_ref","data","location","Layout","pathname","site","buildTime","href","Link","to","siteTitle","className","type","id","currencies","map","currency","key","toUpperCase","children","useStaticQuery","siteMetadata","Date","getFullYear","description","metaDescription","defaultTitle","name","content","property","author"],"sourceRoot":""}